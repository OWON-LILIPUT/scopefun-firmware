#*****************************************************************************************
# Vivado (TM) v2018.3_AR71898 (64-bit)
#
# gen_project.tcl: Tcl script for re-creating project 'Artix-7'
#
# Generated by Vivado on Sun Aug 11 16:47:07 +0200 2019
# IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (gen_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "./srcs/sources_1/fixed_float_pkg/fixed_float_types_c.vhdl"
#    "./srcs/sources_1/fifo_16x20b.vhd"
#    "./srcs/sources_1/adc_if.vhd"
#    "./srcs/sources_1/RAM_DDR3.vhd"
#    "./srcs/sources_1/ddr3_simple_ui.vhd"
#    "./srcs/sources_1/fixed_float_pkg/fixed_pkg_c.vhdl"
#    "./srcs/sources_1/SDP_RAM_64x32b.vhd"
#    "./srcs/sources_1/lut_delay.vhd"
#    "./srcs/sources_1/rand_gen.vhd"
#    "./srcs/sources_1/angle_gen.vhd"
#    "./srcs/sources_1/clk_gen.vhd"
#    "./srcs/sources_1/se_to_ddr.vhd"
#    "./srcs/sources_1/clk_divider_wCE.vhd"
#    "./srcs/sources_1/SPI.vhd"
#    "./srcs/sources_1/LA_core.vhd"
#    "./srcs/sources_1/timer.vhd"
#    "./srcs/sources_1/PWM.vhd"
#    "./srcs/sources_1/blink.vhd"
#    "./srcs/sources_1/ScopeFun_core.vhd"
#    "./srcs/sources_1/awg_core.vhd"
#    "./srcs/sources_1/fifo_32_to_128.vhd"
#    "./srcs/sources_1/cordic_par.vhd"
#    "./srcs/sources_1/print_pkg.vhd"
#    "./srcs/sources_1/SDP_BRAM_custom_signal.vhd"
#    "./srcs/sources_1/ip/mig_ddr3/mig_a.prj"
#    "./srcs/sources_1/ip/clk_wiz_0/clk_wiz_0.xci"
#    "./srcs/sources_1/mavg.vhd"
#    "./srcs/sources_1/ip/fifo_gen_0/fifo_gen_0.xci"
#    "./srcs/sources_1/ip/mig_ddr3/mig_ddr3.xci"
#    "./srcs/sources_1/ip/cordic_0/cordic_0.xci"
#    "./srcs/constrs_1/io_loc.xdc"
#    "./srcs/constrs_1/timing.xdc"
#    "./srcs/constrs_1/bitstream.xdc"
#    "./srcs/sources_1/ddr3_top_tb.vhd"
#    "./srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/sim_tb_top.v"
#    "./srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/wiredly.v"
#    "./srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model_parameters.vh"
#    "./srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model.sv"
#    "./srcs/sources_1/sim_tb_top_behav.wcfg"
#    "./srcs/sources_1/cordic_par_tb_behav.wcfg"
#    "./srcs/sources_1/cordic_par_tb.vhd"
#    "./srcs/sources_1/fifo_32_to_128_tb_behav.wcfg"
#    "./srcs/sources_1/fifo_32_to_128_tb.vhd"
#    "./srcs/sources_1/fifo_16x20b_tb_behav.wcfg"
#    "./srcs/sources_1/fifo_16x20b_tb.vhd"
#    "./srcs/sources_1/fifo_128_to_32_tb_behav.wcfg"
#    "./srcs/sources_1/fifo_128_to_32.vhd"
#    "./srcs/sources_1/fifo_128_to_32_tb.vhd"
#    "./srcs/sources_1/SPI_tb_ADC_behav.wcfg"
#    "./srcs/sources_1/spi_tb_adc.vhd"
#    "./srcs/sources_1/awg_core_tb.vhd"
#    "./srcs/sources_1/awg_core_tb_behav.wcfg"
#    "./srcs/sources_1/timer_tb.vhd"
#    "./srcs/sources_1/mavg_tb.vhd"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir [file dirname [info script]]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "Artix-7"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "gen_project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/Artix-7"]"

# Create project
create_project ${_xil_proj_name_} ${origin_dir}/${_xil_proj_name_} -part xc7a35tftg256-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "disable" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a35tftg256-2" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "sim.ipstatic.source_dir" -value "$proj_dir/${_xil_proj_name_}/${_xil_proj_name_}.ip_user_files/ipstatic" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "source_mgmt_mode" -value "DisplayOnly" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "76" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "76" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "76" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "76" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "76" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "76" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "6" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "76" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "1965" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj
set_property -name "xsim.array_display_limit" -value "64" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/fixed_float_pkg/fixed_float_types_c.vhdl"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_16x20b.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/adc_if.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/RAM_DDR3.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/ddr3_simple_ui.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/fixed_float_pkg/fixed_pkg_c.vhdl"] \
 [file normalize "${origin_dir}/srcs/sources_1/SDP_RAM_64x32b.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/lut_delay.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/rand_gen.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/angle_gen.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/clk_gen.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/se_to_ddr.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/clk_divider_wCE.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/SPI.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/LA_core.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/timer.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/PWM.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/blink.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/ScopeFun_core.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/awg_core.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_32_to_128.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/cordic_par.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/print_pkg.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/SDP_BRAM_custom_signal.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_a.prj"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/clk_wiz_0/clk_wiz_0.xci"] \
 [file normalize "${origin_dir}/srcs/sources_1/mavg.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/fifo_gen_0/fifo_gen_0.xci"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_ddr3.xci"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/cordic_0/cordic_0.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/fixed_float_pkg/fixed_float_types_c.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "ieee_proposed" -objects $file_obj

set file "$origin_dir/srcs/sources_1/fifo_16x20b.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/adc_if.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/RAM_DDR3.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ddr3_simple_ui.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/fixed_float_pkg/fixed_pkg_c.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "ieee_proposed" -objects $file_obj

set file "$origin_dir/srcs/sources_1/SDP_RAM_64x32b.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/lut_delay.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/rand_gen.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/angle_gen.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/clk_gen.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/se_to_ddr.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/clk_divider_wCE.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/SPI.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/LA_core.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/timer.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/PWM.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/blink.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ScopeFun_core.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/awg_core.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/fifo_32_to_128.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/cordic_par.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/print_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "user_lib" -objects $file_obj

set file "$origin_dir/srcs/sources_1/SDP_BRAM_custom_signal.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ip/mig_ddr3/mig_a.prj"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "scoped_to_cells" -value "mig_ddr3" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ip/clk_wiz_0/clk_wiz_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}
set_property -name "registered_with_manager" -value "1" -objects $file_obj

set file "$origin_dir/srcs/sources_1/mavg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ip/fifo_gen_0/fifo_gen_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/srcs/sources_1/ip/mig_ddr3/mig_ddr3.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/srcs/sources_1/ip/cordic_0/cordic_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "fpga" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/srcs/constrs_1/io_loc.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/srcs/constrs_1/io_loc.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/srcs/constrs_1/timing.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/srcs/constrs_1/timing.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/srcs/constrs_1/bitstream.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/srcs/constrs_1/bitstream.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "[file normalize "$origin_dir/srcs/constrs_1/io_loc.xdc"]" -objects $obj
set_property -name "target_part" -value "xc7a35tftg256-2" -objects $obj
set_property -name "target_ucf" -value "[file normalize "$origin_dir/srcs/constrs_1/io_loc.xdc"]" -objects $obj

# Create 'ddr3_test' fileset (if not found)
if {[string equal [get_filesets -quiet ddr3_test] ""]} {
  create_fileset -simset ddr3_test
}

# Set 'ddr3_test' fileset object
set obj [get_filesets ddr3_test]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/ddr3_top_tb.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/sim_tb_top.v"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/wiredly.v"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model_parameters.vh"] \
 [file normalize "${origin_dir}/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model.sv"] \
 [file normalize "${origin_dir}/srcs/sources_1/sim_tb_top_behav.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'ddr3_test' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/ddr3_top_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets ddr3_test] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model_parameters.vh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets ddr3_test] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

set file "$origin_dir/srcs/sources_1/ip/mig_ddr3/mig_ddr3/example_design/sim/ddr3_model.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets ddr3_test] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'ddr3_test' fileset file properties for local files
# None

# Set 'ddr3_test' fileset properties
set obj [get_filesets ddr3_test]
set_property -name "top" -value "sim_tb_top" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'cordic_par' fileset (if not found)
if {[string equal [get_filesets -quiet cordic_par] ""]} {
  create_fileset -simset cordic_par
}

# Set 'cordic_par' fileset object
set obj [get_filesets cordic_par]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/cordic_par_tb_behav.wcfg"] \
 [file normalize "${origin_dir}/srcs/sources_1/cordic_par_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'cordic_par' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/cordic_par_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets cordic_par] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'cordic_par' fileset file properties for local files
# None

# Set 'cordic_par' fileset properties
set obj [get_filesets cordic_par]
set_property -name "sim_mode" -value "post-implementation" -objects $obj

# Create 'fifo_32_to_128' fileset (if not found)
if {[string equal [get_filesets -quiet fifo_32_to_128] ""]} {
  create_fileset -simset fifo_32_to_128
}

# Set 'fifo_32_to_128' fileset object
set obj [get_filesets fifo_32_to_128]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_32_to_128_tb_behav.wcfg"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_32_to_128_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'fifo_32_to_128' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/fifo_32_to_128_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets fifo_32_to_128] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'fifo_32_to_128' fileset file properties for local files
# None

# Set 'fifo_32_to_128' fileset properties
set obj [get_filesets fifo_32_to_128]
set_property -name "top" -value "fifo_32_to_128_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'fifo_16x20b' fileset (if not found)
if {[string equal [get_filesets -quiet fifo_16x20b] ""]} {
  create_fileset -simset fifo_16x20b
}

# Set 'fifo_16x20b' fileset object
set obj [get_filesets fifo_16x20b]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_16x20b_tb_behav.wcfg"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_16x20b_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'fifo_16x20b' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/fifo_16x20b_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets fifo_16x20b] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'fifo_16x20b' fileset file properties for local files
# None

# Set 'fifo_16x20b' fileset properties
set obj [get_filesets fifo_16x20b]
set_property -name "top" -value "fifo_16x20b_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'fifo_128_to_32' fileset (if not found)
if {[string equal [get_filesets -quiet fifo_128_to_32] ""]} {
  create_fileset -simset fifo_128_to_32
}

# Set 'fifo_128_to_32' fileset object
set obj [get_filesets fifo_128_to_32]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_128_to_32_tb_behav.wcfg"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_128_to_32.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/fifo_128_to_32_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'fifo_128_to_32' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/fifo_128_to_32.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets fifo_128_to_32] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/srcs/sources_1/fifo_128_to_32_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets fifo_128_to_32] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'fifo_128_to_32' fileset file properties for local files
# None

# Set 'fifo_128_to_32' fileset properties
set obj [get_filesets fifo_128_to_32]
set_property -name "top" -value "fifo_128_to_32_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'SPI_test' fileset (if not found)
if {[string equal [get_filesets -quiet SPI_test] ""]} {
  create_fileset -simset SPI_test
}

# Set 'SPI_test' fileset object
set obj [get_filesets SPI_test]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/SPI_tb_ADC_behav.wcfg"] \
 [file normalize "${origin_dir}/srcs/sources_1/spi_tb_adc.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'SPI_test' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/spi_tb_adc.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets SPI_test] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'SPI_test' fileset file properties for local files
# None

# Set 'SPI_test' fileset properties
set obj [get_filesets SPI_test]
set_property -name "top" -value "SPI_tb_ADC" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'awg_test' fileset (if not found)
if {[string equal [get_filesets -quiet awg_test] ""]} {
  create_fileset -simset awg_test
}

# Set 'awg_test' fileset object
set obj [get_filesets awg_test]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/awg_core_tb.vhd"] \
 [file normalize "${origin_dir}/srcs/sources_1/awg_core_tb_behav.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'awg_test' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/awg_core_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets awg_test] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'awg_test' fileset file properties for local files
# None

# Set 'awg_test' fileset properties
set obj [get_filesets awg_test]
set_property -name "top" -value "awg_core_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'holdoff' fileset (if not found)
if {[string equal [get_filesets -quiet holdoff] ""]} {
  create_fileset -simset holdoff
}

# Set 'holdoff' fileset object
set obj [get_filesets holdoff]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/timer_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'holdoff' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/timer_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets holdoff] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'holdoff' fileset file properties for local files
# None

# Set 'holdoff' fileset properties
set obj [get_filesets holdoff]
set_property -name "top" -value "timer_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'mavg_tb' fileset (if not found)
if {[string equal [get_filesets -quiet mavg_tb] ""]} {
  create_fileset -simset mavg_tb
}

# Set 'mavg_tb' fileset object
set obj [get_filesets mavg_tb]
set files [list \
 [file normalize "${origin_dir}/srcs/sources_1/mavg_tb.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'mavg_tb' fileset file properties for remote files
set file "$origin_dir/srcs/sources_1/mavg_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets mavg_tb] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'mavg_tb' fileset file properties for local files
# None

# Set 'mavg_tb' fileset properties
set obj [get_filesets mavg_tb]
set_property -name "top" -value "mavg_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a35tftg256-2 -flow {Vivado Synthesis 2018} -strategy "Flow_PerfOptimized_high" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Flow_PerfOptimized_high" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2018" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "synth_1_synth_report_utilization_0" -objects $obj

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a35tftg256-2" -objects $obj
set_property -name "strategy" -value "Flow_PerfOptimized_high" -objects $obj
set_property -name "steps.synth_design.args.fanout_limit" -value "400" -objects $obj
set_property -name "steps.synth_design.args.fsm_extraction" -value "one_hot" -objects $obj
set_property -name "steps.synth_design.args.keep_equivalent_registers" -value "1" -objects $obj
set_property -name "steps.synth_design.args.resource_sharing" -value "off" -objects $obj
set_property -name "steps.synth_design.args.no_lc" -value "1" -objects $obj
set_property -name "steps.synth_design.args.shreg_min_size" -value "5" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a35tftg256-2 -flow {Vivado Implementation 2018} -strategy "Performance_ExplorePostRoutePhysOpt" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Performance_ExplorePostRoutePhysOpt" [get_runs impl_1]
  set_property flow "Vivado Implementation 2018" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Timing Closure Reports_custom} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_init_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_opt_report_drc_0" -objects $obj

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_opt_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_utilization_0 -report_type report_utilization:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_opt_report_utilization_0" -objects $obj

}
# Create 'impl_1_opt_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_methodology_0 -report_type report_methodology:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_methodology_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_opt_report_methodology_0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_io_0" -objects $obj

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_utilization_0" -objects $obj

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_control_sets_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_1" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_post_place_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_phys_opt_report_design_analysis_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_design_analysis_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_design_analysis_0 -report_type report_design_analysis:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_design_analysis_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_phys_opt_report_design_analysis_0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_drc_0" -objects $obj

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_methodology_0" -objects $obj

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_power_0" -objects $obj

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_route_status_0" -objects $obj

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_clock_utilization_0" -objects $obj

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_bus_skew_0" -objects $obj

}
# Create 'impl_1_route_report_design_analysis_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_design_analysis_0] "" ] } {
  create_report_config -report_name impl_1_route_report_design_analysis_0 -report_type report_design_analysis:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_design_analysis_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_design_analysis_0" -objects $obj

}
# Create 'impl_1_route_report_qor_suggestions_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_qor_suggestions_0] "" ] } {
  create_report_config -report_name impl_1_route_report_qor_suggestions_0 -report_type report_qor_suggestions:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_qor_suggestions_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_qor_suggestions_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_bus_skew_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_utilization_0 -report_type report_utilization:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_utilization_0" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a35tftg256-2" -objects $obj
set_property -name "gen_full_bitstream" -value "0" -objects $obj
set_property -name "strategy" -value "Performance_ExplorePostRoutePhysOpt" -objects $obj
set_property -name "steps.opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.place_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.phys_opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.route_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.route_design.args.more options" -value "-tns_cleanup" -objects $obj
set_property -name "steps.post_route_phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.post_route_phys_opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.write_bitstream.args.bin_file" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
set obj [get_dashboards default_dashboard]

# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
# Set current dashboard to 'default_dashboard' 
current_dashboard default_dashboard 
